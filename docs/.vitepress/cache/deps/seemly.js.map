{
  "version": 3,
  "sources": ["../../../../node_modules/.pnpm/seemly@0.3.10/node_modules/seemly/es/animation/next-frame-once.js", "../../../../node_modules/.pnpm/seemly@0.3.10/node_modules/seemly/es/animation/next-frame.js", "../../../../node_modules/.pnpm/seemly@0.3.10/node_modules/seemly/es/dom/get-scroll-parent.js", "../../../../node_modules/.pnpm/seemly@0.3.10/node_modules/seemly/es/dom/unwrap-element.js", "../../../../node_modules/.pnpm/seemly@0.3.10/node_modules/seemly/es/dom/happens-in.js", "../../../../node_modules/.pnpm/seemly@0.3.10/node_modules/seemly/es/dom/get-precise-event-target.js", "../../../../node_modules/.pnpm/seemly@0.3.10/node_modules/seemly/es/css/responsive.js", "../../../../node_modules/.pnpm/seemly@0.3.10/node_modules/seemly/es/css/index.js", "../../../../node_modules/.pnpm/seemly@0.3.10/node_modules/seemly/es/color/colors.js", "../../../../node_modules/.pnpm/seemly@0.3.10/node_modules/seemly/es/color/convert.js", "../../../../node_modules/.pnpm/seemly@0.3.10/node_modules/seemly/es/color/index.js", "../../../../node_modules/.pnpm/seemly@0.3.10/node_modules/seemly/es/misc/index.js"],
  "sourcesContent": ["let onceCbs = [];\nconst paramsMap = new WeakMap();\nfunction flushOnceCallbacks() {\n    onceCbs.forEach((cb) => cb(...paramsMap.get(cb)));\n    onceCbs = [];\n}\nfunction beforeNextFrameOnce(cb, ...params) {\n    paramsMap.set(cb, params);\n    if (onceCbs.includes(cb))\n        return;\n    onceCbs.push(cb) === 1 && requestAnimationFrame(flushOnceCallbacks);\n}\nexport { beforeNextFrameOnce };\n", "let cbs = [];\nlet params = [];\nfunction flushCallbacks() {\n    cbs.forEach((cb, i) => cb(...params[i]));\n    cbs = [];\n    params = [];\n}\nfunction beforeNextFrame(cb, ...args) {\n    cbs.push(cb) === 1 && requestAnimationFrame(flushCallbacks);\n    params.push(args);\n}\nexport { beforeNextFrame };\n", "function getParentNode(node) {\n    // document type\n    if (node.nodeType === 9) {\n        return null;\n    }\n    return node.parentNode;\n}\nexport function getScrollParent(node) {\n    if (node === null)\n        return null;\n    const parentNode = getParentNode(node);\n    if (parentNode === null) {\n        return null;\n    }\n    // Document\n    if (parentNode.nodeType === 9) {\n        return document.documentElement;\n    }\n    // Element\n    if (parentNode.nodeType === 1) {\n        // Firefox want us to check `-x` and `-y` variations as well\n        const { overflow, overflowX, overflowY } = getComputedStyle(parentNode);\n        if (/(auto|scroll|overlay)/.test(overflow + overflowY + overflowX)) {\n            return parentNode;\n        }\n    }\n    return getScrollParent(parentNode);\n}\n", "function unwrapElement(target) {\n    if (typeof target === 'string')\n        return document.querySelector(target);\n    if (typeof target === 'function')\n        return target();\n    return target;\n}\nexport { unwrapElement };\n", "export function happensIn(e, dataSetPropName) {\n    let { target } = e;\n    while (target) {\n        if (target.dataset) {\n            if (target.dataset[dataSetPropName] !== undefined)\n                return true;\n        }\n        target = target.parentElement;\n    }\n    return false;\n}\n", "export function getPreciseEventTarget(event) {\n    return event.composedPath()[0] || null;\n}\n", "export function parseResponsiveProp(reponsiveProp) {\n    if (typeof reponsiveProp === \"number\") {\n        return {\n            '': reponsiveProp.toString()\n        };\n    }\n    const params = {};\n    reponsiveProp.split(/ +/).forEach((pairLiteral) => {\n        if (pairLiteral === '')\n            return;\n        const [prefix, value] = pairLiteral.split(':');\n        if (value === undefined) {\n            params[''] = prefix;\n        }\n        else {\n            params[prefix] = value;\n        }\n    });\n    return params;\n}\nfunction parseResponsivePropValue(reponsiveProp, activeKeyOrSize) {\n    var _a;\n    if (reponsiveProp === undefined || reponsiveProp === null)\n        return undefined;\n    const classObj = parseResponsiveProp(reponsiveProp);\n    if (activeKeyOrSize === undefined)\n        return classObj[''];\n    if (typeof activeKeyOrSize === 'string') {\n        return (_a = classObj[activeKeyOrSize]) !== null && _a !== void 0 ? _a : classObj[''];\n    }\n    else if (Array.isArray(activeKeyOrSize)) {\n        for (let i = activeKeyOrSize.length - 1; i >= 0; --i) {\n            const key = activeKeyOrSize[i];\n            if (key in classObj)\n                return classObj[key];\n        }\n        return classObj[''];\n    }\n    else {\n        // Here we suppose all the keys are number formatted\n        let activeValue = undefined;\n        let activeKey = -1;\n        Object.keys(classObj).forEach((key) => {\n            const keyAsNum = Number(key);\n            if (!Number.isNaN(keyAsNum) &&\n                activeKeyOrSize >= keyAsNum &&\n                keyAsNum >= activeKey) {\n                activeKey = keyAsNum;\n                activeValue = classObj[key];\n            }\n        });\n        return activeValue;\n    }\n}\nexport { parseResponsivePropValue };\n", "export function depx(value) {\n    if (typeof value === 'string') {\n        if (value.endsWith('px')) {\n            return Number(value.slice(0, value.length - 2));\n        }\n        return Number(value);\n    }\n    return value;\n}\nfunction pxfy(value) {\n    if (value === undefined || value === null)\n        return undefined;\n    if (typeof value === 'number')\n        return `${value}px`;\n    if (value.endsWith('px'))\n        return value;\n    return `${value}px`;\n}\nexport { pxfy };\nfunction getMargin(value, position) {\n    const parts = value.trim().split(/\\s+/g);\n    const margin = {\n        top: parts[0]\n    };\n    switch (parts.length) {\n        case 1:\n            margin.right = parts[0];\n            margin.bottom = parts[0];\n            margin.left = parts[0];\n            break;\n        case 2:\n            margin.right = parts[1];\n            margin.left = parts[1];\n            margin.bottom = parts[0];\n            break;\n        case 3:\n            margin.right = parts[1];\n            margin.bottom = parts[2];\n            margin.left = parts[1];\n            break;\n        case 4:\n            margin.right = parts[1];\n            margin.bottom = parts[2];\n            margin.left = parts[3];\n            break;\n        default:\n            throw new Error('[seemly/getMargin]:' + value + ' is not a valid value.');\n    }\n    if (position === undefined)\n        return margin;\n    return margin[position];\n}\nfunction getGap(value, orient) {\n    const [rowGap, colGap] = value.split(' ');\n    if (!orient)\n        return {\n            row: rowGap,\n            col: colGap || rowGap\n        };\n    return orient === 'row' ? rowGap : colGap;\n}\nexport { getMargin, getMargin as getPadding, getGap };\nexport { parseResponsiveProp, parseResponsivePropValue } from './responsive';\n", "// src: https://www.w3schools.com/colors/colors_names.asp\nexport default {\n    aliceblue: \"#F0F8FF\",\n    antiquewhite: \"#FAEBD7\",\n    aqua: \"#0FF\",\n    aquamarine: \"#7FFFD4\",\n    azure: \"#F0FFFF\",\n    beige: \"#F5F5DC\",\n    bisque: \"#FFE4C4\",\n    black: \"#000\",\n    blanchedalmond: \"#FFEBCD\",\n    blue: \"#00F\",\n    blueviolet: \"#8A2BE2\",\n    brown: \"#A52A2A\",\n    burlywood: \"#DEB887\",\n    cadetblue: \"#5F9EA0\",\n    chartreuse: \"#7FFF00\",\n    chocolate: \"#D2691E\",\n    coral: \"#FF7F50\",\n    cornflowerblue: \"#6495ED\",\n    cornsilk: \"#FFF8DC\",\n    crimson: \"#DC143C\",\n    cyan: \"#0FF\",\n    darkblue: \"#00008B\",\n    darkcyan: \"#008B8B\",\n    darkgoldenrod: \"#B8860B\",\n    darkgray: \"#A9A9A9\",\n    darkgrey: \"#A9A9A9\",\n    darkgreen: \"#006400\",\n    darkkhaki: \"#BDB76B\",\n    darkmagenta: \"#8B008B\",\n    darkolivegreen: \"#556B2F\",\n    darkorange: \"#FF8C00\",\n    darkorchid: \"#9932CC\",\n    darkred: \"#8B0000\",\n    darksalmon: \"#E9967A\",\n    darkseagreen: \"#8FBC8F\",\n    darkslateblue: \"#483D8B\",\n    darkslategray: \"#2F4F4F\",\n    darkslategrey: \"#2F4F4F\",\n    darkturquoise: \"#00CED1\",\n    darkviolet: \"#9400D3\",\n    deeppink: \"#FF1493\",\n    deepskyblue: \"#00BFFF\",\n    dimgray: \"#696969\",\n    dimgrey: \"#696969\",\n    dodgerblue: \"#1E90FF\",\n    firebrick: \"#B22222\",\n    floralwhite: \"#FFFAF0\",\n    forestgreen: \"#228B22\",\n    fuchsia: \"#F0F\",\n    gainsboro: \"#DCDCDC\",\n    ghostwhite: \"#F8F8FF\",\n    gold: \"#FFD700\",\n    goldenrod: \"#DAA520\",\n    gray: \"#808080\",\n    grey: \"#808080\",\n    green: \"#008000\",\n    greenyellow: \"#ADFF2F\",\n    honeydew: \"#F0FFF0\",\n    hotpink: \"#FF69B4\",\n    indianred: \"#CD5C5C\",\n    indigo: \"#4B0082\",\n    ivory: \"#FFFFF0\",\n    khaki: \"#F0E68C\",\n    lavender: \"#E6E6FA\",\n    lavenderblush: \"#FFF0F5\",\n    lawngreen: \"#7CFC00\",\n    lemonchiffon: \"#FFFACD\",\n    lightblue: \"#ADD8E6\",\n    lightcoral: \"#F08080\",\n    lightcyan: \"#E0FFFF\",\n    lightgoldenrodyellow: \"#FAFAD2\",\n    lightgray: \"#D3D3D3\",\n    lightgrey: \"#D3D3D3\",\n    lightgreen: \"#90EE90\",\n    lightpink: \"#FFB6C1\",\n    lightsalmon: \"#FFA07A\",\n    lightseagreen: \"#20B2AA\",\n    lightskyblue: \"#87CEFA\",\n    lightslategray: \"#778899\",\n    lightslategrey: \"#778899\",\n    lightsteelblue: \"#B0C4DE\",\n    lightyellow: \"#FFFFE0\",\n    lime: \"#0F0\",\n    limegreen: \"#32CD32\",\n    linen: \"#FAF0E6\",\n    magenta: \"#F0F\",\n    maroon: \"#800000\",\n    mediumaquamarine: \"#66CDAA\",\n    mediumblue: \"#0000CD\",\n    mediumorchid: \"#BA55D3\",\n    mediumpurple: \"#9370DB\",\n    mediumseagreen: \"#3CB371\",\n    mediumslateblue: \"#7B68EE\",\n    mediumspringgreen: \"#00FA9A\",\n    mediumturquoise: \"#48D1CC\",\n    mediumvioletred: \"#C71585\",\n    midnightblue: \"#191970\",\n    mintcream: \"#F5FFFA\",\n    mistyrose: \"#FFE4E1\",\n    moccasin: \"#FFE4B5\",\n    navajowhite: \"#FFDEAD\",\n    navy: \"#000080\",\n    oldlace: \"#FDF5E6\",\n    olive: \"#808000\",\n    olivedrab: \"#6B8E23\",\n    orange: \"#FFA500\",\n    orangered: \"#FF4500\",\n    orchid: \"#DA70D6\",\n    palegoldenrod: \"#EEE8AA\",\n    palegreen: \"#98FB98\",\n    paleturquoise: \"#AFEEEE\",\n    palevioletred: \"#DB7093\",\n    papayawhip: \"#FFEFD5\",\n    peachpuff: \"#FFDAB9\",\n    peru: \"#CD853F\",\n    pink: \"#FFC0CB\",\n    plum: \"#DDA0DD\",\n    powderblue: \"#B0E0E6\",\n    purple: \"#800080\",\n    rebeccapurple: \"#663399\",\n    red: \"#F00\",\n    rosybrown: \"#BC8F8F\",\n    royalblue: \"#4169E1\",\n    saddlebrown: \"#8B4513\",\n    salmon: \"#FA8072\",\n    sandybrown: \"#F4A460\",\n    seagreen: \"#2E8B57\",\n    seashell: \"#FFF5EE\",\n    sienna: \"#A0522D\",\n    silver: \"#C0C0C0\",\n    skyblue: \"#87CEEB\",\n    slateblue: \"#6A5ACD\",\n    slategray: \"#708090\",\n    slategrey: \"#708090\",\n    snow: \"#FFFAFA\",\n    springgreen: \"#00FF7F\",\n    steelblue: \"#4682B4\",\n    tan: \"#D2B48C\",\n    teal: \"#008080\",\n    thistle: \"#D8BFD8\",\n    tomato: \"#FF6347\",\n    turquoise: \"#40E0D0\",\n    violet: \"#EE82EE\",\n    wheat: \"#F5DEB3\",\n    white: \"#FFF\",\n    whitesmoke: \"#F5F5F5\",\n    yellow: \"#FF0\",\n    yellowgreen: \"#9ACD32\",\n    transparent: \"#0000\"\n};\n", "// All the algorithms credit to https://stackoverflow.com/questions/36721830/convert-hsl-to-rgb-and-hex/54014428#54014428\n// original author: Kamil Kiełczewski\n/**\n * @param h 360\n * @param s 100\n * @param l 100\n * @returns [h, s, v] 360, 100, 100\n */\nexport function hsl2hsv(h, s, l) {\n    s /= 100;\n    l /= 100;\n    const v = s * Math.min(l, 1 - l) + l;\n    return [h, v ? (2 - (2 * l) / v) * 100 : 0, v * 100];\n}\n/**\n * @param h 360\n * @param s 100\n * @param v 100\n * @returns [h, s, l] 360, 100, 100\n */\nexport function hsv2hsl(h, s, v) {\n    s /= 100;\n    v /= 100;\n    const l = v - (v * s) / 2;\n    const m = Math.min(l, 1 - l);\n    return [h, m ? ((v - l) / m) * 100 : 0, l * 100];\n}\n/**\n * @param h 360\n * @param s 100\n * @param v 100\n * @returns [r, g, b] 255, 255, 255\n */\nexport function hsv2rgb(h, s, v) {\n    s /= 100;\n    v /= 100;\n    let f = (n, k = (n + h / 60) % 6) => v - v * s * Math.max(Math.min(k, 4 - k, 1), 0);\n    return [f(5) * 255, f(3) * 255, f(1) * 255];\n}\n/**\n * @param r 255\n * @param g 255\n * @param b 255\n * @returns [360, 100, 100]\n */\nexport function rgb2hsv(r, g, b) {\n    r /= 255;\n    g /= 255;\n    b /= 255;\n    let v = Math.max(r, g, b), c = v - Math.min(r, g, b);\n    let h = c && (v == r ? (g - b) / c : v == g ? 2 + (b - r) / c : 4 + (r - g) / c);\n    return [60 * (h < 0 ? h + 6 : h), v && (c / v) * 100, v * 100];\n}\n/**\n * @param r 255\n * @param g 255\n * @param b 255\n * @returns [360, 100, 100]\n */\nexport function rgb2hsl(r, g, b) {\n    r /= 255;\n    g /= 255;\n    b /= 255;\n    let v = Math.max(r, g, b), c = v - Math.min(r, g, b), f = 1 - Math.abs(v + v - c - 1);\n    let h = c && (v == r ? (g - b) / c : v == g ? 2 + (b - r) / c : 4 + (r - g) / c);\n    return [60 * (h < 0 ? h + 6 : h), f ? (c / f) * 100 : 0, (v + v - c) * 50];\n}\n/**\n * @param h 360\n * @param s 100\n * @param l 100\n * @returns [255, 255, 255]\n */\nexport function hsl2rgb(h, s, l) {\n    s /= 100;\n    l /= 100;\n    let a = s * Math.min(l, 1 - l);\n    let f = (n, k = (n + h / 30) % 12) => l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n    return [f(0) * 255, f(8) * 255, f(4) * 255];\n}\n", "import colors from './colors';\nimport { hsl2rgb, hsv2rgb } from './convert';\nconst prefix = '^\\\\s*';\nconst suffix = '\\\\s*$';\nconst percent = '\\\\s*((\\\\.\\\\d+)|(\\\\d+(\\\\.\\\\d*)?))%\\\\s*'; // 4 offset\nconst float = '\\\\s*((\\\\.\\\\d+)|(\\\\d+(\\\\.\\\\d*)?))\\\\s*'; // 4 offset\nconst hex = '([0-9A-Fa-f])';\nconst dhex = '([0-9A-Fa-f]{2})';\nconst hslRegex = new RegExp(`${prefix}hsl\\\\s*\\\\(${float},${percent},${percent}\\\\)${suffix}`);\nconst hsvRegex = new RegExp(`${prefix}hsv\\\\s*\\\\(${float},${percent},${percent}\\\\)${suffix}`);\nconst hslaRegex = new RegExp(`${prefix}hsla\\\\s*\\\\(${float},${percent},${percent},${float}\\\\)${suffix}`);\nconst hsvaRegex = new RegExp(`${prefix}hsva\\\\s*\\\\(${float},${percent},${percent},${float}\\\\)${suffix}`);\nconst rgbRegex = new RegExp(`${prefix}rgb\\\\s*\\\\(${float},${float},${float}\\\\)${suffix}`);\nconst rgbaRegex = new RegExp(`${prefix}rgba\\\\s*\\\\(${float},${float},${float},${float}\\\\)${suffix}`);\nconst sHexRegex = new RegExp(`${prefix}#${hex}${hex}${hex}${suffix}`);\nconst hexRegex = new RegExp(`${prefix}#${dhex}${dhex}${dhex}${suffix}`);\nconst sHexaRegex = new RegExp(`${prefix}#${hex}${hex}${hex}${hex}${suffix}`);\nconst hexaRegex = new RegExp(`${prefix}#${dhex}${dhex}${dhex}${dhex}${suffix}`);\nfunction parseHex(value) {\n    return parseInt(value, 16);\n}\n/**\n * Convert color string to hsla array\n * @param color format like hsl(180, 100%, 100%), hsla(180, 100%, 100%, 1)\n * @returns\n */\nexport function hsla(color) {\n    try {\n        let i;\n        if ((i = hslaRegex.exec(color))) {\n            return [\n                roundDeg(i[1]),\n                roundPercent(i[5]),\n                roundPercent(i[9]),\n                roundAlpha(i[13])\n            ];\n        }\n        else if ((i = hslRegex.exec(color))) {\n            return [roundDeg(i[1]), roundPercent(i[5]), roundPercent(i[9]), 1];\n        }\n        throw new Error(`[seemly/hsla]: Invalid color value ${color}.`);\n    }\n    catch (e) {\n        throw e;\n    }\n}\n/**\n * Convert color string to hsva array\n * @param color format like hsv(180, 100%, 100%), hsva(180, 100%, 100%, 1)\n * @returns\n */\nexport function hsva(color) {\n    try {\n        let i;\n        if ((i = hsvaRegex.exec(color))) {\n            return [\n                roundDeg(i[1]),\n                roundPercent(i[5]),\n                roundPercent(i[9]),\n                roundAlpha(i[13])\n            ];\n        }\n        else if ((i = hsvRegex.exec(color))) {\n            return [roundDeg(i[1]), roundPercent(i[5]), roundPercent(i[9]), 1];\n        }\n        throw new Error(`[seemly/hsva]: Invalid color value ${color}.`);\n    }\n    catch (e) {\n        throw e;\n    }\n}\n/**\n * Convert color string to rgba array.\n * @param color format like #000[0], #000000[00], rgb(0, 0, 0),\n * rgba(0, 0, 0, 0), hsl(a) color, hsv(a) color and color keywords and\n * transparent\n * @returns\n */\nexport function rgba(color) {\n    try {\n        let i;\n        if ((i = hexRegex.exec(color))) {\n            return [parseHex(i[1]), parseHex(i[2]), parseHex(i[3]), 1];\n        }\n        else if ((i = rgbRegex.exec(color))) {\n            return [roundChannel(i[1]), roundChannel(i[5]), roundChannel(i[9]), 1];\n        }\n        else if ((i = rgbaRegex.exec(color))) {\n            return [\n                roundChannel(i[1]),\n                roundChannel(i[5]),\n                roundChannel(i[9]),\n                roundAlpha(i[13])\n            ];\n        }\n        else if ((i = sHexRegex.exec(color))) {\n            return [\n                parseHex(i[1] + i[1]),\n                parseHex(i[2] + i[2]),\n                parseHex(i[3] + i[3]),\n                1\n            ];\n        }\n        else if ((i = hexaRegex.exec(color))) {\n            return [\n                parseHex(i[1]),\n                parseHex(i[2]),\n                parseHex(i[3]),\n                roundAlpha(parseHex(i[4]) / 255)\n            ];\n        }\n        else if ((i = sHexaRegex.exec(color))) {\n            return [\n                parseHex(i[1] + i[1]),\n                parseHex(i[2] + i[2]),\n                parseHex(i[3] + i[3]),\n                roundAlpha(parseHex(i[4] + i[4]) / 255)\n            ];\n        }\n        else if (color in colors) {\n            return rgba(colors[color]);\n        }\n        else if (hslRegex.test(color) || hslaRegex.test(color)) {\n            const [h, s, l, a] = hsla(color);\n            return [...hsl2rgb(h, s, l), a];\n        }\n        else if (hsvRegex.test(color) || hsvaRegex.test(color)) {\n            const [h, s, v, a] = hsva(color);\n            return [...hsv2rgb(h, s, v), a];\n        }\n        throw new Error(`[seemly/rgba]: Invalid color value ${color}.`);\n    }\n    catch (e) {\n        throw e;\n    }\n}\nfunction normalizeAlpha(alphaValue) {\n    return alphaValue > 1 ? 1 : alphaValue < 0 ? 0 : alphaValue;\n}\nfunction stringifyRgb(r, g, b) {\n    return `rgb(${roundChannel(r)}, ${roundChannel(g)}, ${roundChannel(b)})`;\n}\nfunction stringifyRgba(r, g, b, a) {\n    return `rgba(${roundChannel(r)}, ${roundChannel(g)}, ${roundChannel(b)}, ${normalizeAlpha(a)})`;\n}\nfunction compositeChannel(v1, a1, v2, a2, a) {\n    return roundChannel((v1 * a1 * (1 - a2) + v2 * a2) / a);\n}\nexport function composite(background, overlay) {\n    if (!Array.isArray(background))\n        background = rgba(background);\n    if (!Array.isArray(overlay))\n        overlay = rgba(overlay);\n    const a1 = background[3];\n    const a2 = overlay[3];\n    const alpha = roundAlpha(a1 + a2 - a1 * a2);\n    return stringifyRgba(compositeChannel(background[0], a1, overlay[0], a2, alpha), compositeChannel(background[1], a1, overlay[1], a2, alpha), compositeChannel(background[2], a1, overlay[2], a2, alpha), alpha);\n}\nexport function changeColor(base, options) {\n    const [r, g, b, a = 1] = Array.isArray(base) ? base : rgba(base);\n    if (typeof options.alpha === 'number') {\n        return stringifyRgba(r, g, b, options.alpha);\n    }\n    return stringifyRgba(r, g, b, a);\n}\nexport function scaleColor(base, options) {\n    const [r, g, b, a = 1] = Array.isArray(base) ? base : rgba(base);\n    const { lightness = 1, alpha = 1 } = options;\n    return toRgbaString([r * lightness, g * lightness, b * lightness, a * alpha]);\n}\nexport function getAlpha(base) {\n    var _a;\n    const alpha = (_a = (Array.isArray(base) ? base : rgba(base))[3]) !== null && _a !== void 0 ? _a : 1;\n    return alpha;\n}\nexport function getAlphaString(base) {\n    return `${getAlpha(base)}`;\n}\nexport function roundAlpha(value) {\n    const v = Math.round(Number(value) * 100) / 100;\n    if (v > 1)\n        return 1;\n    if (v < 0)\n        return 0;\n    return v;\n}\nexport function roundDeg(value) {\n    const v = Math.round(Number(value));\n    if (v >= 360)\n        return 0;\n    if (v < 0)\n        return 0;\n    return v;\n}\nexport function roundChannel(value) {\n    const v = Math.round(Number(value));\n    if (v > 255)\n        return 255;\n    if (v < 0)\n        return 0;\n    return v;\n}\nexport function roundPercent(value) {\n    const v = Math.round(Number(value));\n    if (v > 100)\n        return 100;\n    if (v < 0)\n        return 0;\n    return v;\n}\nexport function toRgbString(base) {\n    const [r, g, b] = Array.isArray(base) ? base : rgba(base);\n    return stringifyRgb(r, g, b);\n}\nexport function toRgbaString(base) {\n    const [r, g, b] = base;\n    if (3 in base) {\n        return `rgba(${roundChannel(r)}, ${roundChannel(g)}, ${roundChannel(b)}, ${roundAlpha(base[3])})`;\n    }\n    return `rgba(${roundChannel(r)}, ${roundChannel(g)}, ${roundChannel(b)}, 1)`;\n}\nexport function toHsvString(base) {\n    return `hsv(${roundDeg(base[0])}, ${roundPercent(base[1])}%, ${roundPercent(base[2])}%)`;\n}\nexport function toHsvaString(base) {\n    const [h, s, v] = base;\n    if (3 in base) {\n        return `hsva(${roundDeg(h)}, ${roundPercent(s)}%, ${roundPercent(v)}%, ${roundAlpha(base[3])})`;\n    }\n    return `hsva(${roundDeg(h)}, ${roundPercent(s)}%, ${roundPercent(v)}%, 1)`;\n}\nexport function toHslString(base) {\n    return `hsl(${roundDeg(base[0])}, ${roundPercent(base[1])}%, ${roundPercent(base[2])}%)`;\n}\nexport function toHslaString(base) {\n    const [h, s, l] = base;\n    if (3 in base) {\n        return `hsla(${roundDeg(h)}, ${roundPercent(s)}%, ${roundPercent(l)}%, ${roundAlpha(base[3])})`;\n    }\n    return `hsla(${roundDeg(h)}, ${roundPercent(s)}%, ${roundPercent(l)}%, 1)`;\n}\n/**\n *\n * @param base [255, 255, 255, 255], [255, 255, 255], any hex string\n * @returns\n */\nexport function toHexaString(base) {\n    if (typeof base === 'string') {\n        let i;\n        if (i = hexRegex.exec(base)) {\n            return `${i[0]}FF`;\n        }\n        else if (i = hexaRegex.exec(base)) {\n            return i[0];\n        }\n        else if (i = sHexRegex.exec(base)) {\n            return `#${i[1]}${i[1]}${i[2]}${i[2]}${i[3]}${i[3]}FF`;\n        }\n        else if (i = sHexaRegex.exec(base)) {\n            return `#${i[1]}${i[1]}${i[2]}${i[2]}${i[3]}${i[3]}${i[4]}${i[4]}`;\n        }\n        throw new Error(`[seemly/toHexString]: Invalid hex value ${base}.`);\n    }\n    const hex = `#${base\n        .slice(0, 3)\n        .map((unit) => roundChannel(unit).toString(16).toUpperCase().padStart(2, '0'))\n        .join('')}`;\n    const a = base.length === 3\n        ? 'FF'\n        : roundChannel(base[3] * 255)\n            .toString(16)\n            .padStart(2, '0')\n            .toUpperCase();\n    return hex + a;\n}\n/**\n *\n * @param base [255, 255, 255, 255], [255, 255, 255], any hex string\n * @returns\n */\nexport function toHexString(base) {\n    if (typeof base === 'string') {\n        let i;\n        if (i = hexRegex.exec(base)) {\n            return i[0];\n        }\n        else if (i = hexaRegex.exec(base)) {\n            return i[0].slice(0, 7);\n        }\n        else if (i = (sHexRegex.exec(base) || sHexaRegex.exec(base))) {\n            return `#${i[1]}${i[1]}${i[2]}${i[2]}${i[3]}${i[3]}`;\n        }\n        throw new Error(`[seemly/toHexString]: Invalid hex value ${base}.`);\n    }\n    return `#${base\n        .slice(0, 3)\n        .map((unit) => roundChannel(unit).toString(16).toUpperCase().padStart(2, '0'))\n        .join('')}`;\n}\nexport { hsl2hsv, hsv2hsl, hsv2rgb, rgb2hsv, rgb2hsl, hsl2rgb } from './convert';\n", "export function createId(length = 8) {\n    return Math.random()\n        .toString(16)\n        .slice(2, 2 + length);\n}\nexport function repeat(count, v) {\n    const ret = [];\n    for (let i = 0; i < count; ++i) {\n        ret.push(v);\n    }\n    return ret;\n}\nfunction indexMap(count, createValue) {\n    const ret = [];\n    if (!createValue) {\n        for (let i = 0; i < count; ++i) {\n            ret.push(i);\n        }\n        return ret;\n    }\n    for (let i = 0; i < count; ++i) {\n        ret.push(createValue(i));\n    }\n    return ret;\n}\nexport { indexMap };\nexport async function sleep(ms) {\n    return new Promise(resolve => {\n        setTimeout(resolve, ms);\n    });\n}\n"],
  "mappings": "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",
  "names": ["params", "params", "prefix", "hex"]
}
