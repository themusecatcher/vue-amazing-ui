import{_ as l,C as a,c as i,o as n,j as e,G as d,a5 as r,a as o}from"./chunks/framework.A9obJdg9.js";const u=JSON.parse('{"title":"快速上手","description":"","frontmatter":{},"headers":[],"relativePath":"utils/started.md","filePath":"utils/started.md","lastUpdated":1751599270000}'),g={name:"utils/started.md"};function p(h,t,E,c,k,f){const s=a("GlobalElement");return n(),i("div",null,[t[0]||(t[0]=e("h1",{id:"快速上手",tabindex:"-1"},[o("快速上手 "),e("a",{class:"header-anchor",href:"#快速上手","aria-label":'Permalink to "快速上手"'},"​")],-1)),d(s),t[1]||(t[1]=r(`<h2 id="介绍" tabindex="-1">介绍 <a class="header-anchor" href="#介绍" aria-label="Permalink to &quot;介绍&quot;">​</a></h2><p>功能丰富，简单易用！</p><h2 id="使用" tabindex="-1">使用 <a class="header-anchor" href="#使用" aria-label="Permalink to &quot;使用&quot;">​</a></h2><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setup</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lang</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  dateFormat,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  formatNumber,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  rafTimeout,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  cancelRaf,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  throttle,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  debounce,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  add,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  downloadFile,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  toggleDark,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  useEventListener,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  useMutationObserver,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  useScroll,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  useFps,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  useMediaQuery,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  useResizeObserver,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  useSlotsExist,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  useInject,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  useOptionsSupported</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vue-amazing-ui&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h2 id="说明" tabindex="-1">说明 <a class="header-anchor" href="#说明" aria-label="Permalink to &quot;说明&quot;">​</a></h2><table tabindex="0"><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Description</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;">dateFormat</td><td style="text-align:left;">格式化日期时间字符串函数</td><td style="text-align:left;">(value: number | string | Date = Date.now(), format: string = &#39;YYYY-MM-DD HH:mm:ss&#39;) =&gt; string</td></tr><tr><td style="text-align:left;">formatNumber</td><td style="text-align:left;">数字格式化函数</td><td style="text-align:left;">(value: number | string, precision: number = 2, separator: string = &#39;,&#39;, decimal: string = &#39;.&#39;, prefix?: string, suffix?: string) =&gt; string</td></tr><tr><td style="text-align:left;">rafTimeout</td><td style="text-align:left;">使用 <code>requestAnimationFrame</code> 实现的延迟 <code>setTimeout</code> 或间隔 <code>setInterval</code> 调用函数</td><td style="text-align:left;">(fn: Function, delay: number = 0, interval: boolean = false) =&gt; { id: number }</td></tr><tr><td style="text-align:left;">cancelRaf</td><td style="text-align:left;">用于取消 <code>rafTimeout</code> 函数</td><td style="text-align:left;">(raf: { id: number }) =&gt; void</td></tr><tr><td style="text-align:left;">throttle</td><td style="text-align:left;">节流函数</td><td style="text-align:left;">(fn: Function, delay: number = 300) =&gt; Function</td></tr><tr><td style="text-align:left;">debounce</td><td style="text-align:left;">防抖函数</td><td style="text-align:left;">(fn: Function, delay: number = 300) =&gt; Function</td></tr><tr><td style="text-align:left;">add</td><td style="text-align:left;">消除 <code>js</code> 加减精度问题的加法函数</td><td style="text-align:left;">(num1: number, num2: number) =&gt; number</td></tr><tr><td style="text-align:left;">downloadFile</td><td style="text-align:left;">下载文件并自定义文件名，未传 <code>fileName</code> 时，从文件地址中自动提取文件名称</td><td style="text-align:left;">(url: string, fileName?: string) =&gt; void</td></tr><tr><td style="text-align:left;">toggleDark</td><td style="text-align:left;">一键切换暗黑模式函数</td><td style="text-align:left;">() =&gt; void</td></tr><tr><td style="text-align:left;">useEventListener</td><td style="text-align:left;">使用 <code>Vue</code> 的生命周期钩子添加和移除事件监听器</td><td style="text-align:left;">(target: HTMLElement | Window | Document, event: string, callback: Function) =&gt; void</td></tr><tr><td style="text-align:left;">useMutationObserver</td><td style="text-align:left;">使用 <code>MutationObserver</code> 观察 <code>DOM</code> 元素的变化</td><td style="text-align:left;">(target: Ref | Ref[] | HTMLElement | HTMLElement[], callback: MutationCallback, options: object = {}) =&gt; { start: () =&gt; void, stop: () =&gt; void }</td></tr><tr><td style="text-align:left;">useScroll</td><td style="text-align:left;">实时监测目标元素滚动位置及状态</td><td style="text-align:left;">(target: Ref | HTMLElement | Window | Document = window, throttleDelay: number = 0, onScroll?: (e: Event) =&gt; void, onStop?: (e: Event) =&gt; void) =&gt; { x: Ref&lt;number&gt;, xScrollMax: Ref&lt;number&gt;, y: Ref&lt;number&gt;, yScrollMax: Ref&lt;number&gt;, isScrolling: Ref&lt;boolean&gt;, left: Ref&lt;boolean&gt;, right: Ref&lt;boolean&gt;, top: Ref&lt;boolean&gt;, bottom: Ref&lt;boolean&gt; }</td></tr><tr><td style="text-align:left;">useFps</td><td style="text-align:left;">实时监测浏览器刷新率FPS</td><td style="text-align:left;">() =&gt; { fps: Ref&lt;number&gt; }</td></tr><tr><td style="text-align:left;">useMediaQuery</td><td style="text-align:left;">使用媒体查询来判断当前环境是否符合指定的媒体查询条件</td><td style="text-align:left;">(mediaQuery: string) =&gt; { match: Ref&lt;boolean&gt; }</td></tr><tr><td style="text-align:left;">useResizeObserver</td><td style="text-align:left;">使用 <code>ResizeObserver</code> 观察 <code>DOM</code> 元素尺寸变化</td><td style="text-align:left;">(target: Ref | Ref[] | HTMLElement | HTMLElement[], callback: ResizeObserverCallback, options: object = {}) =&gt; { start: () =&gt; void, stop: () =&gt; void }</td></tr><tr><td style="text-align:left;">useSlotsExist</td><td style="text-align:left;">监听给定名称或名称数组的插槽是否存在，支持监听单个插槽或一组插槽的存在</td><td style="text-align:left;">&lt;T extends string | string[] = &#39;default&#39;&gt;(slotsName: T) =&gt; T extends string ? ComputedRef&lt;boolean&gt; : Reactive&lt;Record&lt;string, ComputedRef&lt;boolean&gt;&gt;&gt;</td></tr><tr><td style="text-align:left;">useInject</td><td style="text-align:left;">使用依赖注入的函数，用于获取颜色调色板和阴影颜色</td><td style="text-align:left;">(key: string) =&gt; { colorPalettes: Ref&lt;string[]&gt;, shadowColor: Ref&lt;string&gt; }</td></tr><tr><td style="text-align:left;">useOptionsSupported</td><td style="text-align:left;">检查浏览器是否支持给定的事件监听器选项</td><td style="text-align:left;">(prop: &#39;capture&#39; | &#39;once&#39; | &#39;passive&#39; | &#39;signal&#39;) =&gt; { isSupported: Ref&lt;boolean&gt; }</td></tr></tbody></table>`,6))])}const x=l(g,[["render",p]]);export{u as __pageData,x as default};
